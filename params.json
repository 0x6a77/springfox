{"name":"Springdox","tagline":"Spring MVC integration for Swagger","body":"# Swagger-springmvc\r\n[![Download](https://api.bintray.com/packages/swaggerspringmvc/swaggerspringmvc/swagger-springmvc/images/download.svg) ](https://bintray.com/swaggerspringmvc/swaggerspringmvc/swagger-springmvc/_latestVersion)\r\n\r\n| Unit  | Functional   | Coverage   |\r\n|---|---|---|\r\n|[![Build Status](https://travis-ci.org/springdox/springdox.svg?branch=master)](https://travis-ci.org/springdox/springdox)   |[![Build Status](https://travis-ci.org/adrianbk/swagger-springmvc-demo.svg?branch=master)](https://travis-ci.org/adrianbk/swagger-springmvc-demo) |[![Coverage Status](https://coveralls.io/repos/springdox/springdox/badge.svg)](https://coveralls.io/r/springdox/springdox) |\r\n\r\n### About\r\n\r\nThis project integrates swagger with the Spring Web MVC framework. The complete swagger specification is available\r\nat https://github.com/wordnik/swagger-spec and it's worth being familiar with the main concepts of the specification and the documentation on the [Swagger Annotations] (https://github.com/swagger-api/swagger-core/wiki/Annotations)\r\nTypically a Spring Web MVC project will use this project in combination with the swagger-ui project (https://github.com/wordnik/swagger-ui)\r\nto provide the user interface which visualises an applications JSON api's. The most common know use of this project has been\r\nSpring Web MVC applications using springs `MappingJackson2HttpMessageConverter` to produce JSON API endpoints.\r\n\r\nThe demo project (https://github.com/adrianbk/swagger-springmvc-demo) contains a number of examples using both spring\r\nweb mvc and spring-boot.\r\n\r\n### Development and contribution guidelines are available [here](https://github.com/martypitt/swagger-springmvc/wiki/Development)\r\n\r\n### Repositories\r\n\r\n#### Release version\r\n__Maven__\r\n\r\n```xml\r\n\r\n<repositories>\r\n    <repository>\r\n      <id>jcenter-release</id>\r\n      <name>jcenter</name>\r\n      <url>http://oss.jfrog.org/artifactory/oss-release-local/</url>\r\n    </repository>\r\n</repositories>\r\n\r\n<dependency>\r\n    <groupId>com.mangofactory</groupId>\r\n    <artifactId>swagger-springmvc</artifactId>\r\n    <version>1.0.0</version>\r\n</dependency>\r\n\r\n```\r\n\r\n__Gradle__\r\n\r\n```groovy\r\n\r\nrepositories {\r\n    jcenter()\r\n}\r\n\r\ncompile \"com.mangofactory:swagger-springmvc:1.0.0\"\r\n```\r\n\r\n#### Snapshot version\r\n\r\n__Maven__\r\n```xml\r\n<repositories>\r\n    <repository>\r\n      <id>jcenter-snapshots</id>\r\n      <name>jcenter</name>\r\n      <url>http://oss.jfrog.org/artifactory/oss-snapshot-local/</url>\r\n    </repository>\r\n</repositories>\r\n\r\n<dependency>\r\n    <groupId>com.mangofactory</groupId>\r\n    <artifactId>swagger-springmvc</artifactId>\r\n    <version>1.0.1-SNAPSHOT</version>\r\n</dependency>\r\n```\r\n\r\n__Gradle__\r\n\r\n```groovy\r\n\r\nrepositories {\r\n   maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }\r\n}\r\n\r\ncompile \"com.mangofactory:swagger-springmvc:1.0.1-SNAPSHOT\"\r\n```\r\n\r\n### Notable Dependencies\r\n- As of v0.9.5 all dependencies on __scala__ have been removed.\r\n- Spring 3.2.x or above\r\n- jackson 2.4.4\r\n- guava 15.0\r\n\r\n### Usage (Quick guide)\r\nThis quick guide outlines how to get swagger-springmvc up and running with a default configuration.\r\nThe recommended way to integrate swagger-springmvc with your application is to use the `SwaggerSpringMvcPlugin` as explained below.\r\n\r\n#### Spring Java Configuration\r\n- By far, the easiest way to enable swagger\r\n- Assuming you have configured Spring MVC without an xml based servlet application context.\r\n- A typical minimal configuration looks as follows:\r\n\r\n```java\r\n@Configuration\r\n@EnableWebMvc\r\n@EnableSwagger\r\n@ComponentScan(\"com.myapp.packages\")\r\npublic class WebAppConfig {\r\n ...\r\n}\r\n```\r\nThe `@EnableSwagger` annotation, in this example, enables swagger-springmvc out of the box. The generated swagger\r\njson Resource Listing is available at /api-docs\r\n\r\n\r\n#### Spring xml Configuration\r\n- To get the default implementation simply define a bean of type: `com.mangofactory.swagger.configuration.SpringSwaggerConfig`\r\n\r\n```xml\r\n<mvc:annotation-driven/> <!-- Required so swagger-springmvc can access spring's RequestMappingHandlerMapping  -->\r\n<bean class=\"com.mangofactory.swagger.configuration.SpringSwaggerConfig\" />\r\n```\r\n- The generated swagger\r\njson Resource Listing is available at /api-docs\r\n\r\n\r\n### Usage (SwaggerSpringMvcPlugin)\r\n\r\nThe recommended way to integrate swagger-springmvc with your application is to use the `SwaggerSpringMvcPlugin`. If you are ever\r\ngoing to need to configure or customize how swagger-springmvc generates your application's swagger api documentation\r\nyou are going to need to use the `SwaggerSpringMvcPlugin`.\r\n\r\n\r\n### SwaggerSpringMvcPlugin XML Configuration\r\nTo use the plugin you must create a spring java configuration class which uses spring's `@Configuration`.\r\nThis config class must then be defined in your xml application context.\r\n\r\n\r\n```xml\r\n<!-- Required so swagger-springmvc can access spring's RequestMappingHandlerMapping  -->\r\n<mvc:annotation-driven/>\r\n\r\n<bean class=\"com.yourapp.configuration.MySwaggerConfig\"/>\r\n```\r\n\r\n```java\r\n\r\n@Configuration\r\n@EnableSwagger //Loads the spring beans required by the framework\r\npublic class MySwaggerConfig {\r\n\r\n   private SpringSwaggerConfig springSwaggerConfig;\r\n\r\n   /**\r\n    * Required to autowire SpringSwaggerConfig\r\n    */\r\n   @Autowired\r\n   public void setSpringSwaggerConfig(SpringSwaggerConfig springSwaggerConfig) {\r\n      this.springSwaggerConfig = springSwaggerConfig;\r\n   }\r\n\r\n   /**\r\n    * Every SwaggerSpringMvcPlugin bean is picked up by the swagger-mvc framework - allowing for multiple\r\n    * swagger groups i.e. same code base multiple swagger resource listings.\r\n    */\r\n   @Bean\r\n   public SwaggerSpringMvcPlugin customImplementation(){\r\n      return new SwaggerSpringMvcPlugin(this.springSwaggerConfig)\r\n              .includePatterns(\".*pet.*\");\r\n   }\r\n\r\n}\r\n```\r\n\r\n\r\n### SwaggerSpringMvcPlugin Spring Java Configuration\r\n- Use the `@EnableSwagger` annotation.\r\n- Autowire `SpringSwaggerConfig`.\r\n- Define one or more SwaggerSpringMvcPlugin instances using springs `@Bean` annotation.\r\n\r\n```java\r\n@Configuration\r\n@EnableWebMvc\r\n@EnableSwagger\r\n@ComponentScan(\"com.myapp.controllers\")\r\npublic class CustomJavaPluginConfig {\r\n\r\n   private SpringSwaggerConfig springSwaggerConfig;\r\n\r\n   @Autowired\r\n   public void setSpringSwaggerConfig(SpringSwaggerConfig springSwaggerConfig) {\r\n      this.springSwaggerConfig = springSwaggerConfig;\r\n   }\r\n\r\n   @Bean //Don't forget the @Bean annotation\r\n   public SwaggerSpringMvcPlugin customImplementation(){\r\n      return new SwaggerSpringMvcPlugin(this.springSwaggerConfig)\r\n            .apiInfo(apiInfo())\r\n            .includePatterns(\".*pet.*\");\r\n   }\r\n\r\n    private ApiInfo apiInfo() {\r\n      ApiInfo apiInfo = new ApiInfo(\r\n              \"My Apps API Title\",\r\n              \"My Apps API Description\",\r\n              \"My Apps API terms of service\",\r\n              \"My Apps API Contact Email\",\r\n              \"My Apps API Licence Type\",\r\n              \"My Apps API License URL\"\r\n        );\r\n      return apiInfo;\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Swagger-UI\r\n\r\n#### Option 1\r\n- __Note:__ Only use this option if you don't need to customize any of the swagger-ui static content, otherwise use option 2.\r\n- Use the web-jar which packages all of the swagger-ui static content.\r\n- Requires that your app is using the servlet 3 specification.\r\n- For non-spring boot applications some extra spring configuration (ResourceHandler's) is required. See: https://github.com/adrianbk/swagger-springmvc-demo/tree/master/swagger-ui\r\n\r\n```groovy\r\n\r\ndependencies {\r\n  ...\r\n  compile \"org.ajar:swagger-spring-mvc-ui:0.4\"\r\n}\r\n```\r\n\r\n#### Option 2\r\n- Manually copy all of the static content swagger-ui's dist directory (https://github.com/wordnik/swagger-ui/tree/master/dist)\r\n- Provide the necessary view resolvers and resource handlers to serve the static content.\r\n- Consult the spring documentation on serving static resources.\r\n\r\nThe following is one way to serve static content from /src/main/webapp\r\n```\r\n<!-- Direct static mappings -->\r\n<mvc:resources mapping=\"*.html\" location=\"/\"/>\r\n\r\n<!-- Serve static content-->\r\n<mvc:default-servlet-handler/>\r\n```\r\n\r\n## Change log available [here](History.md)\r\n\r\n### Migration From 0.8.0 -> 0.8.4+\r\nPrior to 0.8.4 the configuration of Swagger-springmvc was far too verbose as indicated by a number of users. SwaggerSpringMvcPlugin\r\nwas introduced to make configuration simpler and less verbose. It is recommended to follow the usage guides above and migrate\r\nyour swagger-springmvc configuration to use the `SwaggerSpringMvcPlugin`\r\n\r\n\r\n### How It works\r\n\r\nSwagger-springmvc bootstraps your spring application and scans the `RequestMappingHandlerMapping's` created\r\nby spring to generate the swagger documentation for your applications API's.\r\nSwagger-springmvc stores the generated swagger documentation, in memory, and serves it as JSON using a spring controller.\r\n\r\n\r\n### Core Concepts\r\n\r\n![alt tag](https://raw.githubusercontent.com/martypitt/swagger-springmvc/master/docs/swaggerSpringMvc.png)\r\n\r\n#### Swagger group\r\n\r\nA swagger group is a concept introduced by this library which is simply a unique identifier for a Swagger Resource Listing\r\nwithin your application. The reason this concept was introduced was to support applications which require more than one\r\nResource Listing. Why would you need more than one Resource Listing?\r\n - A single Spring Web MVC  application serves more than one API e.g. publicly facing and internally facing.\r\n - A single Spring Web MVC  application serves multiple versions of the same API. e.g. v1 and v2\r\n\r\n In most cases an application will not need more than one Resource Listing and the concept of swagger groups can be ignored.\r\n\r\n#### Resource Listing\r\n\r\nPlease see the Swagger Specification for a detailed explanation.\r\n\r\n\r\n#### API Documentation Endpoints\r\n\r\nAll swagger documentation (JSON responses) are served from DefaultSwaggerController. The controller maintains a cache\r\nof ResourcesListing's which are uniquely identified by the `swaggerGroup`. There is a 1:1 relationship between\r\nResourceListings and swagger groups (`SwaggerSpringMvcPlugin` instances). A typical application will have a single\r\nSwaggerSpringMvcPlugin which is given the unique identifier 'default'.\r\n\r\n__Note:__ The below paths are relative to your applications context path and/or DispatcherServlet `url-pattern`\r\n\r\n\r\n| Path                    | Description                                                             |\r\n|---                      |---                                                                      |\r\n| /api-docs               | Returns the first _Resource Listing_ found in the cache                 |\r\n| /api-docs?group=default | Returns the _Resource Listing_ for the default swagger group            |\r\n| /api-docs?group=group1  | Returns the _Resource Listing_ for the swagger group 'group1'           |\r\n| /api-docs/group1/albums | Returns the album's _Api Declaration_ for the swagger group 'group1'    |\r\n\r\n\r\n### Urls (SwaggerPathProvider)\r\nThe swagger specification recommends the use of absolute URL's where possible - specifically the the `path` attribute of\r\napi's within the ResourceListing's and the `basePath` attribute of Api Declarations. Most users of swagger-springmvc have expressed\r\na preference for relative urls hence `RelativeSwaggerPathProvider` is the default `SwaggerPathProvider`. `AbsoluteSwaggerPathProvider`\r\ncan be used to provide absolute urls. `AbsoluteSwaggerPathProvider` has a hardcoded appRoot but demonstrates the concept. If you wish\r\nto use absolute urls use `AbsoluteSwaggerPathProvider` as a guide and configure your `SwaggerSpringMvcPlugin` with:\r\n\r\n ```java\r\n.pathProvider(myPathProvider)\r\n ```\r\n\r\n### Customization\r\n\r\n#### Excluding api endpoints\r\nAnnotate a controller class or controller methods with the `@ApiIgnore` annotation.\r\n\r\nFor more powerful control, specify regular expressions:\r\n\r\n```java\r\nswaggerSpringMvcPlugin.includePatterns(...)\r\n```\r\n\r\nExclude all controllers or controller handler methods with specific annotations .\r\n```java\r\nswaggerSpringMvcPlugin.excludeAnnotations(MyCustomApiExclusion.class)\r\n\r\n```\r\n\r\n#### HTTP Response codes and messages\r\nConfiguring global response messages for RequestMappings\r\n```java\r\nswaggerSpringMvcPlugin.globalResponseMessage(new ResponseMessage(OK.value(), \"200 means all good \\o/\", toOption(null)))\r\n```\r\n\r\nConfiguring per-RequestMappings method response messages\r\n```java\r\n@ApiResponses(value = {@ApiResponse(code = 405, message = \"Invalid input\")})\r\npublic .... createSomething(..)\r\n\r\n```\r\n\r\n#### Ordering the api's within a ResourceListing\r\n- Defaults to `ResourceListingLexicographicalOrdering`\r\n\r\n```java\r\nswaggerSpringMvcPlugin.apiListingReferenceOrdering(new ResourceListingPositionalOrdering())\r\n```\r\n\r\n- Use the position attribute of the `@Api` annotation\r\n```\r\n@Controller\r\n@Api(value=\"\", description=\"Operations on Businesses\", position = 2)\r\npublic class BusinessService {\r\n    ...\r\n}\r\n```\r\n\r\n#### Ordering operations in Api Declarations\r\nUse the swagger `ApiOperation` annotation.\r\n ```java\r\n   @ApiOperation(value = \"\", position = 5)\r\n   @RequestMapping(\"/somewhere\")\r\n   public Model methodWithPosition() {\r\n        ...\r\n   }\r\n\r\n ```\r\n\r\n#### Ordering ApiDescriptions (withing ApiListing's)\r\n- Defaults to `ApiDescriptionLexicographicalOrdering`\r\n\r\n```java\r\nswaggerSpringMvcPlugin.apiDescriptionOrdering(new MyCustomApiDescriptionOrdering());\r\n```\r\n\r\n#### Changing how Generic Types are Named\r\n\r\nBy default, types with generics will be labeled with '\\u00ab'(<<), '\\u00bb'(>>), and commas. This can be problematic\r\nwith things like swagger-codegen. You can override this behavior by implementing your own `GenericTypeNamingStrategy`.\r\nFor example, if you wanted `List<String>` to be encoded as 'ListOfString' and `Map<String, Object>`\r\nto be encoded as 'MapOfStringAndObject' you could implement the following:\r\n\r\n```java\r\n\r\npublic class SimpleGenericNamingStrategy implements GenericTypeNamingStrategy {\r\n    private final static String OPEN = \"Of\";\r\n    private final static String CLOSE = \"\";\r\n    private final static String DELIM = \"And\";\r\n\r\n    @Override\r\n    public String getOpenGeneric() {\r\n        return OPEN;\r\n    }\r\n\r\n    @Override\r\n    public String getCloseGeneric() {\r\n        return CLOSE;\r\n    }\r\n\r\n    @Override\r\n    public String getTypeListDelimiter() {\r\n        return DELIM;\r\n    }\r\n\r\n}\r\n```\r\n\r\nthen during plugin customization:\r\n\r\n```java\r\nswaggerSpringMvcPlugin.setGenericTypeNamingStrategy(new SimpleGenericTypeNamingStrategy());\r\n```\r\n\r\n### Model Customization\r\n#### Excluding spring handler method arguments or custom types\r\nTo exclude controller method arguments form the generated swagger model JSON.\r\n```java\r\nswaggerSpringMvcPlugin.ignoredParameterTypes(MyCustomType.class)\r\n```\r\nBy default, a number of Spring's handler method arguments are ignored. See: com.mangofactory.swagger.configuration.SpringSwaggerConfig#defaultIgnorableParameterTypes\r\n\r\n\r\n##Development\r\n\r\n- Development environment and build tasks See: [build.md] (https://github.com/martypitt/swagger-springmvc/blob/master/build.md)\r\n- [Release process](https://github.com/martypitt/swagger-springmvc/issues/422)\r\n- Contributing - please see the [wiki](https://github.com/martypitt/swagger-springmvc/wiki) for some guidelines\r\n\r\n## Support\r\n\r\nIf you find issues or bugs please use the github issue [tracker] (https://github.com/martypitt/swagger-springmvc/issues)\r\n\r\nLicense\r\n-------\r\n\r\nCopyright 2012-2015 Marty Pitt - [@martypitt](https://github.com/martypitt), Dilip Krishnan - [@dilipkrish](https://github.com/dilipkrish),\r\nAdrian Kelly -  [@adrianbk](https://github.com/adrianbk),\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at [apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0)\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}